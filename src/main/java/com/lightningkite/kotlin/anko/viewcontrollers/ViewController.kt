package com.lightningkite.kotlin.anko.viewcontrollers;

import android.content.res.Resources
import android.view.View
import com.lightningkite.kotlin.Disposable
import com.lightningkite.kotlin.anko.viewcontrollers.implementations.VCActivity

/**
 * An object that manages a view.
 * They are typically stored statically, ensuring that the view controller's data is retained between view recreations.
 * It should retain no references to the views except between calls to [make] and [unmake].
 * Created by jivie on 6/26/15.
 */
interface ViewController : Disposable {
    /**
     * An empty/dummy view controller.
     */
    object EMPTY : ViewController {
        override fun make(activity: VCActivity): View = View(activity)
    }

    /**
     * Makes a view that displays the information within this controller.
     */
    fun make(activity: VCActivity): View

    /**
     * Called when the view is fully animated in.
     */
    fun animateInComplete(activity: VCActivity, view: View) {
    }

    /**
     * Called when the view is fully animated in.
     */
    fun animateOutStart(activity: VCActivity, view: View) {
    }

    /**
     * Clean up a view generated by this view controller.
     */
    fun unmake(view: View) {
    }

    /**
     * Dispose anything that needs to be disposed.  After this is called, you should never use this object again.
     */
    override fun dispose() {
    }

    /**
     * Gets the human-friendly title of this view.  Useful for putting the title on the action bar, if you use one.
     */
    fun getTitle(resources: Resources): String = "Untitled"


    /**
     * Called when back is pressed.
     * Example usage:
     * override fun onBackPressed(backAction:()->Unit){
     *      if(canGoBack) backAction()
     *      else informUserWhy()
     * }
     * @param backAction Execute this function to do the parent's onBackPressed.
     */
    fun onBackPressed(backAction: () -> Unit) {
        backAction()
    }
}
